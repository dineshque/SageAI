/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles, MBTI results, and recommendations,
 * ensuring that only the authenticated user can access their own data. Subjects and syllabus topics are publicly readable.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/mbtiResults/{mbtiResultId}: Stores MBTI results for a user.
 * - /users/{userId}/recommendations/{recommendationId}: Stores AI-powered recommendations for a student.
 * - /subjects/{subjectId}: Stores subjects, accessible to everyone.
 * - /subjects/{subjectId}/syllabusTopics/{topicId}: Stores syllabus topics for a subject, accessible to everyone.
 *
 * @keySecurityDecisions
 * - User data (profiles, MBTI results, recommendations) is strictly controlled by user ID.
 * - Subjects and syllabus topics are readable by everyone; write access is not granted.
 * - Listing of user data is allowed only for the owning user.
 * - Structural segregation is used: private user data is stored under `/users/{userId}`, while public data (subjects, topics) is stored at the top level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - User tries to create a profile with an ID that doesn't match their auth UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to MBTI result documents.
     * @path /users/{userId}/mbtiResults/{mbtiResultId}
     * @allow (create, get, list, update, delete) - Authenticated user can access their own MBTI results.
     * @deny (create) - User tries to create an MBTI result for another user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mbtiResults/{mbtiResultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to recommendation documents.
     * @path /users/{userId}/recommendations/{recommendationId}
     * @allow (create, get, list, update, delete) - Authenticated user can access their own recommendations.
     * @deny (create) - User tries to create a recommendation for another user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/recommendations/{recommendationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subject documents.
     * @path /subjects/{subjectId}
     * @allow (get, list) - Everyone can read subject documents.
     * @deny (create, update, delete) - No one can write subject documents.
     * @principle Public read access with no write access.
     */
    match /subjects/{subjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to syllabus topic documents.
     * @path /subjects/{subjectId}/syllabusTopics/{topicId}
     * @allow (get, list) - Everyone can read syllabus topic documents.
     * @deny (create, update, delete) - No one can write syllabus topic documents.
     * @principle Public read access with no write access.
     */
    match /subjects/{subjectId}/syllabusTopics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}